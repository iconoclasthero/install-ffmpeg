#!/bin/bash
# nb: the swp file that editscript relies on is provided by nano
_CACHE="/dev/shm/cache"

editscript(){
  local scriptname script path swp; scriptname=$(realpath "$0" 2>/dev/null); script="${scriptname##*/}"; path="${scriptname%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptname") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptname" "$swp"; exit ;}

pause(){ read -p "$*" ; }

[[ "$1" == @(edit|e|nano|-e|-E) ]] && editscript

prompt(){
read -p "$1 " choice
case "$choice" in
  y|Y ) return 0;;
  * ) return 1;;
#  n|N ) return 1;;
#  * ) echo "invalid";;
esac
}

[[ -z "$CACHE" ]] && CACHE="$_CACHE"
[[ ! -d "$CACHE" ]] && mkdir -p "$CACHE" && chown "$user" "$CACHE"

SUDO=''
if (( "$EUID" != 0 )) 2>/dev/null; then
    SUDO='sudo'
else echo "RUN AS ROOT"
fi

if prompt "install dependencies?"; then

if prompt "install base dependencies via apt"; then
"$SUDO" apt -y install \
  libunistring-dev \
  autoconf \
  automake \
  build-essential \
  cmake \
  git-core \
  libass-dev \
  libfreetype6-dev \
  libgnutls28-dev \
  libmp3lame-dev \
  libsdl2-dev \
  libtool \
  libva-dev \
  libvdpau-dev \
  libvorbis-dev \
  libxcb1-dev \
  libxcb-shm0-dev \
  libxcb-xfixes0-dev \
  meson \
  ninja-build \
  pkg-config \
  texinfo \
  wget \
  yasm \
  zlib1g-dev
fi

mkdir -p "$CACHE/ffmpeg_sources" "$CACHE/bin" "$CACHE/ffmpeg_build"

if prompt "sudo apt install nasm"; then
"$SUDO" apt install nasm
fi

if prompt "sudo apt install libx264-dev"; then
"$SUDO" apt install libx264-dev
fi

if prompt "sudo apt install libx265-dev libnuma-dev"; then
"$SUDO" apt install libx265-dev libnuma-dev
fi

if prompt "sudo apt install libvpx-dev"; then
"$SUDO" apt install libvpx-dev
fi

if prompt "sudo apt install libfdk-aac-dev"; then
"$SUDO" apt install libfdk-aac-dev
fi

if prompt "sudo apt install libopus-dev"; then
"$SUDO" apt install libopus-dev
fi

if prompt "sudo apt install libaom-dev"; then
"$SUDO" apt install libaom-dev
fi

if prompt "sudo apt install libsvtav1-dev"; then
"$SUDO" apt install libsvtav1-dev libsvtav1enc-dev libsvtav1dec-dev
fi

#This ultimately wasn't necessary when I installed on Sat Dec  2 12:30:49 PM EST 2023
#cd "$CACHE/ffmpeg_sources" && \
#git -C SVT-AV1 pull 2> /dev/null || git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
#mkdir -p SVT-AV1/build && \
#cd SVT-AV1/build && \
#PATH="$CACHE/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$CACHE/ffmpeg_build" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF .. && \
#PATH="$CACHE/bin:$PATH" make -j4 && \
#make install

if prompt "sudo apt install libdav1d-dev"; then
"$SUDO" apt install libdav1d-dev
fi

if prompt "install libvmaf from source"; then
cd "$CACHE"/ffmpeg_sources || exit && \
wget -c https://github.com/Netflix/vmaf/archive/v2.3.1.tar.gz && \
tar xvf v2.3.1.tar.gz && \
mkdir -p vmaf-2.3.1/libvmaf/build bin &&\
cd vmaf-2.3.1/libvmaf/build && \
meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix "$CACHE/ffmpeg_build" --bindir="$CACHE/ffmpeg_build/bin" --libdir="$CACHE/ffmpeg_build/lib" && \
ninja && \
ninja install
mv "$CACHE/ffmpeg_build/bin/"* "$CACHE/bin"
fi

fi


if prompt "get ffmpeg sources"; then
cd "$CACHE/ffmpeg_sources" || exit && \
#wget -c -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && \
#tar xjvf ffmpeg-snapshot.tar.bz2 && \
git clone https://git.ffmpeg.org/ffmpeg.git ffmpeg
cd ffmpeg
fi

if prompt "./configure"; then
cd "$CACHE/ffmpeg_sources/ffmpeg" || exit
PATH="$CACHE/bin:$PATH" PKG_CONFIG_PATH="$CACHE/ffmpeg_build/lib/pkgconfig" ./configure \
  --bindir="/usr/local/bin" `#set bindir for your system; $HOME/bin was default` \
  --prefix="$CACHE/ffmpeg_build" \
  --pkg-config-flags="--static" \
  `# --extra-ldflags="-static"` \
  --extra-cflags="-I$CACHE/ffmpeg_build/include" \
  --extra-ldflags="-L$CACHE/ffmpeg_build/lib" \
  --extra-libs="-lpthread -lm" \
  --ld="g++" \
  --enable-gpl \
  --enable-gnutls \
  --enable-libaom \
  --enable-libass \
  --enable-libfdk-aac \
  --enable-libfreetype \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libsvtav1 \
  --enable-libdav1d \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libx264 \
  --enable-libx265 \
  --enable-nonfree \
  --enable-libpulse\
  --enable-pthreads
fi

if prompt "build ffmpeg (make -j4)"; then
cd "$CACHE/ffmpeg_sources/ffmpeg" || exit
PATH="$CACHE/bin:$PATH" make -j4
fi

if prompt "install ffmpeg (sudo make install)"; then
cd "$CACHE/ffmpeg_sources/ffmpeg" || exit
sudo make install && hash -r
fi




