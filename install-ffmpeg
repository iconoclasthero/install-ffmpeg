#!/bin/bash
# nb: the swp file that editscript relies on is provided by nano
_CACHE="/dev/shm/cache"
scriptpath=$(realpath "$0")
vmaf_ver=3.0.0


editscript(){
  local scriptpath script path swp; scriptpath=$(realpath "$0" 2>/dev/null); script="${scriptpath##*/}"; path="${scriptpath%/*}"; swp="$path/.$script.swp"
     [[ ! -e "$swp" ]] && printf "\n\n%s\n\n" "$swp" && (/usr/bin/nano "$scriptpath") && exit
     printf "\n%s is already being edited.\n%s exists; try fg or look in another window.\n" "$scriptpath" "$swp"; exit ;}

pause(){ read -rp "$*" ; }


prompt(){
read -p "$1 " choice
case "$choice" in
  y|Y ) return 0;;
  * ) return 1;;
#  n|N ) return 1;;
#  * ) echo "invalid";;
esac
}

[[ "$1" == @(edit|e|-e) ]] && editscript
for i in ffmpeg_sources ffmpeg_build ffmpeg_bin; do eval "$i"="$_CACHE/$i"; done
#[[ -z "$CACHE" ]] && CACHE="$_CACHE"
#[[ ! -d "$CACHE" ]] && mkdir -p "$CACHE" && chown "$user" "$CACHE"

CACHE="$_CACHE"

for i in "$ffmpeg_sources" "$ffmpeg_build" "$ffmpeg_bin"; do mkdir -p "$i"; [[ ! -d "$i" ]] && { echo "Error creating $i; investigate" ; exit; }; done

if (( "$EUID" != 0 )) 2>/dev/null; then
  SUDO='sudo'
else
  echo "RUN AS ROOT"
fi

if prompt "install dependencies?"; then

  if prompt "install base dependencies via apt"; then
  "$SUDO" apt -y install \
    autoconf \
    automake \
    build-essential \
    cmake \
    git-core \
    libass-dev \
    libfreetype6-dev \
    libgnutls28-dev \
    libmp3lame-dev \
    libsdl2-dev \
    libtool \
    libva-dev \
    libvdpau-dev \
    libvorbis-dev \
    libxcb1-dev \
    libxcb-shm0-dev \
    libxcb-xfixes0-dev \
    meson \
    ninja-build \
    pkg-config \
    texinfo \
    wget \
    yasm \
    zlib1g-dev \
    gnutls-bin \
    nasm \
    libx264-dev \
    libx265-dev \
    libvpx-dev \
    libfdk-aac-dev \
    libopus-dev \
    libaom-dev \
    libdav1d-dev \
    libzmq3-dev \
    libunistring-dev \
    libnuma-dev \
    libsvtav1enc-dev \
    libvulkan-dev \
    libvulkan-volk-dev
  fi
#removed     libsvtav1dec-dev \
#removed     libsvtav1-dev\


#  if prompt "sudo apt install libvulkan-dev"; then
#  "$SUDO" apt install libvulkan-dev libvulkan-volk-dev
#  fi

  #This ultimately wasn't necessary when I installed on Sat Dec  2 12:30:49 PM EST 2023
  #cd "$CACHE/ffmpeg_sources" && \
  #git -C SVT-AV1 pull 2> /dev/null || git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
  #mkdir -p SVT-AV1/build && \
  #cd SVT-AV1/build && \
  #PATH="$CACHE/bin:$PATH" cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="$CACHE/ffmpeg_build" -DCMAKE_BUILD_TYPE=Release -DBUILD_DEC=OFF -DBUILD_SHARED_LIBS=OFF .. && \
  #PATH="$CACHE/bin:$PATH" make -j4 && \
  #make install

  #Thu May 16 08:47:27 AM EDT 2024
  # On peral harbor day last year vmaf 3 was released...

  #if prompt "download and build libvmaf from source? "; then
  #cd "$CACHE"/ffmpeg_sources || exit && \
  #wget -c https://github.com/Netflix/vmaf/archive/v2.3.1.tar.gz && \
  #tar xvf v2.3.1.tar.gz && \
  #mkdir -p vmaf-2.3.1/libvmaf/build bin &&\
  #cd vmaf-2.3.1/libvmaf/build && \
  #meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix "$CACHE/ffmpeg_build" --bindir="$CACHE/ffmpeg_build/bin" --libdir="$CACHE/ffmpeg_build/lib" && \
  #ninja && \
  #ninja install
  #mv "$CACHE/ffmpeg_build/bin/"* "$CACHE/bin"
  #fi

  [[ -f "$ffmpeg_build/include/libvmaf/libvmaf.h" ]] && install_vmaf=false || install_vmaf=true

  if [[ "$install_vmaf" = true ]]; then
    prompt "download and build libvmaf from source? " && install_vmaf=true || install_vmaf=false
  elif [[ "$install_vmaf" = false ]]; then
    prompt "$ffmpeg_build/include/libvmaf/libvmaf.h exists, download & rebuild from source?" && install_vmaf=true
  fi

  if [[ "$install_vmaf" ]]; then
      cd "$ffmpeg_sources" || { echo "Failed to change directory to $ffmpeg_sources; investigate. (exit 1)" ; exit 1 ; }
      [[ -z "$vmaf_ver" ]] && vmaf_ver=3.0.0
      vmaf_wget="v$vmaf_ver.tar.gz"
      wget -cO "$vmaf_wget" "https://github.com/Netflix/vmaf/archive/$vmaf_wget" &&
      vmaf_current="$(tar ztf "$vmaf_wget" |head -1)" &&
      vmaf_current="${vmaf_current%\/}"
      vmaf_current_file="$vmaf_current.tar.gz" &&
      tar xfv "$vmaf_wget" &&
      mkdir -p "$vmaf_current"/libvmaf/build bin &&
      cd "$vmaf_current"/libvmaf/build &&
      meson setup -Denable_tests=false -Denable_docs=false --buildtype=release --default-library=static .. --prefix "$ffmpeg_build" --bindir="$ffmpeg_build/bin" --libdir="$ffmpeg_build/lib" &&
      ninja &&
      ninja install &&
      mv "$ffmpeg_build/bin/"* "$ffmpeg_bin" || { echo "$vmaf_current failed to buiild; investigate. exit (1)"; exit 1; }
  fi


#  if ! command -v exhale >/dev/null && prompt "Download and build ecodis exhale for xHE-AAC?"; then
#    exhale_build="$ffmpeg_sources/exhale-build"
#    mkdir -p "$exhale_build" || { printf 'Failed to create exale build directory (%s); investigate. (exit 1)\n' "$exhale_build"; exit 1; }
#    cd "$exhale_build" || { printf 'Failed to change directory to %s; investigate. (exit 1)\n' "$exhale_buils"; exit 1; }
#    wget https://gitlab.com/ecodis/exhale/-/archive/v1.2.2RC/exhale-v1.2.2RC.tar.gz
#    tar xvf exhale-v1.2.2RC.tar.gz && cd exhale-v1.2.2
#    make BUILD32=0 release
#    sudo cp -v bin/exhale /usr/local/bin
#  fi



fi

if prompt "get ffmpeg sources? "; then
mkdir -p "$ffmpeg_sources"
cd "$ffmpeg_sources" || exit && \
wget -c -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2 && \
tar xjvf ffmpeg-snapshot.tar.bz2 && \
cd ffmpeg
fi

if prompt "./configure? "; then
cd "$ffmpeg_sources/ffmpeg" || exit
PATH="$ffmpeg_bin:$PATH" PKG_CONFIG_PATH="$ffmpeg_build/lib/pkgconfig" ./configure \
  --bindir="/usr/local/bin" `#set bindir for your system; $HOME/bin was default` \
  --prefix="$ffmpeg_build" \
  --pkg-config-flags="--static" \
  --extra-cflags="-I$CACHE/ffmpeg_build/include" \
  --extra-ldflags="-L$CACHE/ffmpeg_build/lib" \
  --extra-libs="-lpthread -lm" \
  --ld="g++" \
  --enable-gpl \
  --enable-gnutls \
  --enable-libaom \
  --enable-libass \
  --enable-libfdk-aac \
  --enable-libfreetype \
  --enable-libmp3lame \
  --enable-libopus \
  --enable-libsvtav1 \
  --enable-libdav1d \
  --enable-libvorbis \
  --enable-libvpx \
  --enable-libx264 \
  --enable-libx265 \
  --enable-nonfree \
  --enable-libpulse \
  --enable-libzmq \
  --enable-librtmp \
  --enable-libsrt \
  --enable-libssh \
  --enable-librabbitmq \
`#  --enable-libbluray` \
`#  --enable-libdvdnav` \
`#  --enable-libdvdread` \
`#  --enable-libcdio` \
  --enable-libbs2b \
  --enable-libvmaf \
  --enable-libzimg \
  --enable-libsoxr \
`# for the latitude laptop add:` \
  --enable-vulkan \
  --enable-vaapi \
  --enable-libvpl \
  --enable-libdrm

  ec="$?"
  if (( "$?" != 0 )); then
    echo "configure failed to set up the make file. (exit 1)"
    exit
  fi
fi

if prompt "build ffmpeg (make -j4)"; then
cd "$ffmpeg_sources/ffmpeg" || exit
PATH="$ffmpeg_bin:$PATH" make -j4
fi

if prompt "install ffmpeg (sudo make install)"; then
cd "$ffmpeg_sources/ffmpeg" || exit
sudo make install && hash -r
fi




